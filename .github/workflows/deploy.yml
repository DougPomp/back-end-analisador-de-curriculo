# .github/workflows/deploy.yml

name: Deploy Analisador de Currículo

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: zeronauta/analisador-de-curriculo

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build e Push da imagem da aplicação
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest

      - name: Deploy na VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Garante que o diretório do projeto exista
            mkdir -p ~/analisador-de-curriculo
            cd ~/analisador-de-curriculo

            # Bloco de atualização do repositório à prova de falhas
            # 1. Garante que o diretório seja um repositório git
            git init
            # 2. Adiciona/atualiza o repositório remoto
            git remote add origin https://github.com/DougPomp/back-end-analisador-de-curriculo.git || git remote set-url origin https://github.com/DougPomp/back-end-analisador-de-curriculo.git
            # 3. Baixa todos os objetos do repositório
            git fetch origin
            # 4. Limpa quaisquer arquivos não rastreados
            git clean -fd
            # 5. Força a atualização para o estado exato da branch 'main'
            git reset --hard origin/main

            # Cria o arquivo .env com TODOS os segredos necessários
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
            echo "NPM_DB_ROOT_PASSWORD=${{ secrets.NPM_DB_ROOT_PASSWORD }}" >> .env
            echo "NPM_DB_PASSWORD=${{ secrets.NPM_DB_PASSWORD }}" >> .env

            # Baixa a imagem mais recente da nossa aplicação que foi enviada ao Docker Hub
            docker compose pull app

            # Sobe TODOS os serviços definidos no docker-compose.yml
            docker compose up -d --remove-orphans

            # Limpa imagens Docker antigas
            docker image prune -af
