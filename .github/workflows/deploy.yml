# .github/workflows/deploy.yml
# Este é o cérebro da nossa automação.

name: Deploy Analisador de Currículo

# Gatilho: A action será acionada a cada 'push' na branch 'main'.
on:
  push:
    branches:
      - main

# Variáveis de Ambiente Globais para o Workflow
env:
  # IMPORTANTE: Substitua pelo seu usuário no Docker Hub e nome da imagem.
  DOCKER_IMAGE_NAME: zeronauta/analisador-de-curriculo

jobs:
  # O único job que teremos: 'deploy'
  deploy:
    # O job rodará em uma máquina virtual Ubuntu fornecida pelo GitHub.
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout do Código
      # Baixa o código do seu repositório para a máquina virtual da action.
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Login no Docker Hub
      # Faz o login no Docker Hub usando os segredos que vamos configurar no GitHub.
      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 3. Build e Push da Imagem Docker
      # Constrói a imagem a partir do Dockerfile e a envia para o Docker Hub.
      - name: Build e Push da imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # A tag 'latest' aponta para a versão mais recente.
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest

      # 4. Deploy na VPS via SSH
      # Conecta na sua VPS e executa os comandos para atualizar a aplicação.
      - name: Deploy na VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Navega até a pasta do projeto na VPS
            cd ~/analisador-de-curriculo

            # Cria ou atualiza o arquivo .env com a chave da OpenAI a partir dos segredos do GitHub
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env

            # Cria ou atualiza o docker-compose.yml
            # (Aqui estamos criando o arquivo diretamente, mas poderia ser copiado do repo)
            cat <<EOF > docker-compose.yml
            version: '3.8'
            services:
              analisador-de-curriculo:
                image: ${{ env.DOCKER_IMAGE_NAME }}:latest
                restart: always
                container_name: analisador_de_curriculo_app
                env_file:
                  - ./.env
                ports:
                  - "5000:5000"
                logging:
                  driver: "json-file"
                  options:
                    max-size: "10m"
                    max-file: "3"
            EOF

            # Baixa a imagem mais recente do Docker Hub
            docker-compose pull

            # Sobe o serviço com a nova imagem em modo 'detached' (background)
            # --remove-orphans remove contêineres antigos se o serviço for renomeado
            docker-compose up -d --remove-orphans

            # Limpa imagens Docker antigas e não utilizadas para economizar espaço
            docker image prune -af
